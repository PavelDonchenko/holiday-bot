// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	model "git.foxminded.ua/foxstudent106361/holiday-bot/internal/model"
)

// Fetcher is an autogenerated mock type for the Fetcher type
type Fetcher struct {
	mock.Mock
}

// GetForecast provides a mock function with given fields: city, lon, lat
func (_m *Fetcher) GetForecast(city string, lon string, lat string) (*model.Forecast, error) {
	ret := _m.Called(city, lon, lat)

	var r0 *model.Forecast
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.Forecast, error)); ok {
		return rf(city, lon, lat)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Forecast); ok {
		r0 = rf(city, lon, lat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Forecast)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(city, lon, lat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHolidays provides a mock function with given fields: date, country
func (_m *Fetcher) GetHolidays(date time.Time, country string) ([]model.Holiday, error) {
	ret := _m.Called(date, country)

	var r0 []model.Holiday
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, string) ([]model.Holiday, error)); ok {
		return rf(date, country)
	}
	if rf, ok := ret.Get(0).(func(time.Time, string) []model.Holiday); ok {
		r0 = rf(date, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Holiday)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, string) error); ok {
		r1 = rf(date, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewFetcher creates a new instance of Fetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFetcher(t mockConstructorTestingTNewFetcher) *Fetcher {
	mock := &Fetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
