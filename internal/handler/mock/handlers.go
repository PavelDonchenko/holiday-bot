// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "git.foxminded.ua/foxstudent106361/holiday-bot/internal/model"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	mock "github.com/stretchr/testify/mock"
)

// Handlers is an autogenerated mock type for the Handlers type
type Handlers struct {
	mock.Mock
}

// HandleCreateNotification provides a mock function with given fields: message
func (_m *Handlers) HandleCreateNotification(message *tgbotapi.Message) (string, error) {
	ret := _m.Called(message)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*tgbotapi.Message) (string, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(*tgbotapi.Message) string); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*tgbotapi.Message) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleDeleteLastSubscription provides a mock function with given fields:
func (_m *Handlers) HandleDeleteLastSubscription() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleDeleteSub provides a mock function with given fields: clb
func (_m *Handlers) HandleDeleteSub(clb *tgbotapi.CallbackQuery) error {
	ret := _m.Called(clb)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tgbotapi.CallbackQuery) error); ok {
		r0 = rf(clb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleFlags provides a mock function with given fields: message
func (_m *Handlers) HandleFlags(message *tgbotapi.Message) tgbotapi.MessageConfig {
	ret := _m.Called(message)

	var r0 tgbotapi.MessageConfig
	if rf, ok := ret.Get(0).(func(*tgbotapi.Message) tgbotapi.MessageConfig); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(tgbotapi.MessageConfig)
	}

	return r0
}

// HandleGetHolidays provides a mock function with given fields: message
func (_m *Handlers) HandleGetHolidays(message *tgbotapi.Message) tgbotapi.MessageConfig {
	ret := _m.Called(message)

	var r0 tgbotapi.MessageConfig
	if rf, ok := ret.Get(0).(func(*tgbotapi.Message) tgbotapi.MessageConfig); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(tgbotapi.MessageConfig)
	}

	return r0
}

// HandleGetLastSubscription provides a mock function with given fields:
func (_m *Handlers) HandleGetLastSubscription() (model.Subscription, error) {
	ret := _m.Called()

	var r0 model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.Subscription, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.Subscription); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.Subscription)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleGetTime provides a mock function with given fields: chatID
func (_m *Handlers) HandleGetTime(chatID int64) tgbotapi.MessageConfig {
	ret := _m.Called(chatID)

	var r0 tgbotapi.MessageConfig
	if rf, ok := ret.Get(0).(func(int64) tgbotapi.MessageConfig); ok {
		r0 = rf(chatID)
	} else {
		r0 = ret.Get(0).(tgbotapi.MessageConfig)
	}

	return r0
}

// HandleGetWeatherByCoordinate provides a mock function with given fields: message
func (_m *Handlers) HandleGetWeatherByCoordinate(message *tgbotapi.Message) tgbotapi.MessageConfig {
	ret := _m.Called(message)

	var r0 tgbotapi.MessageConfig
	if rf, ok := ret.Get(0).(func(*tgbotapi.Message) tgbotapi.MessageConfig); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(tgbotapi.MessageConfig)
	}

	return r0
}

// HandleSaveTime provides a mock function with given fields: time, sub
func (_m *Handlers) HandleSaveTime(time string, sub model.Subscription) error {
	ret := _m.Called(time, sub)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.Subscription) error); ok {
		r0 = rf(time, sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleSendLocation provides a mock function with given fields: message
func (_m *Handlers) HandleSendLocation(message *tgbotapi.Message) tgbotapi.MessageConfig {
	ret := _m.Called(message)

	var r0 tgbotapi.MessageConfig
	if rf, ok := ret.Get(0).(func(*tgbotapi.Message) tgbotapi.MessageConfig); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(tgbotapi.MessageConfig)
	}

	return r0
}

// HandleSendSubscriptions provides a mock function with given fields: message
func (_m *Handlers) HandleSendSubscriptions(message *tgbotapi.Message) tgbotapi.MessageConfig {
	ret := _m.Called(message)

	var r0 tgbotapi.MessageConfig
	if rf, ok := ret.Get(0).(func(*tgbotapi.Message) tgbotapi.MessageConfig); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(tgbotapi.MessageConfig)
	}

	return r0
}

// HandleStart provides a mock function with given fields: message
func (_m *Handlers) HandleStart(message *tgbotapi.Message) tgbotapi.MessageConfig {
	ret := _m.Called(message)

	var r0 tgbotapi.MessageConfig
	if rf, ok := ret.Get(0).(func(*tgbotapi.Message) tgbotapi.MessageConfig); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(tgbotapi.MessageConfig)
	}

	return r0
}

type mockConstructorTestingTNewHandlers interface {
	mock.TestingT
	Cleanup(func())
}

// NewHandlers creates a new instance of Handlers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandlers(t mockConstructorTestingTNewHandlers) *Handlers {
	mock := &Handlers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
