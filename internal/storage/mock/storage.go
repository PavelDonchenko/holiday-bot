// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "git.foxminded.ua/foxstudent106361/holiday-bot/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// DeleteLastSubscription provides a mock function with given fields: ctx
func (_m *Storage) DeleteLastSubscription(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscription provides a mock function with given fields: ctx, long, lat, _a3
func (_m *Storage) DeleteSubscription(ctx context.Context, long float64, lat float64, _a3 string) error {
	ret := _m.Called(ctx, long, lat, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, string) error); ok {
		r0 = rf(ctx, long, lat, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLastSubscription provides a mock function with given fields: ctx
func (_m *Storage) GetLastSubscription(ctx context.Context) (model.Subscription, error) {
	ret := _m.Called(ctx)

	var r0 model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.Subscription, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.Subscription); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.Subscription)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptions provides a mock function with given fields: ctx, chatID
func (_m *Storage) GetSubscriptions(ctx context.Context, chatID int64) ([]model.Subscription, error) {
	ret := _m.Called(ctx, chatID)

	var r0 []model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]model.Subscription, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Subscription); ok {
		r0 = rf(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, sub
func (_m *Storage) Save(ctx context.Context, sub model.Subscription) (string, error) {
	ret := _m.Called(ctx, sub)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Subscription) (string, error)); ok {
		return rf(ctx, sub)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Subscription) string); ok {
		r0 = rf(ctx, sub)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Subscription) error); ok {
		r1 = rf(ctx, sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTime provides a mock function with given fields: ctx, _a1, id
func (_m *Storage) UpdateTime(ctx context.Context, _a1 time.Time, id string) error {
	ret := _m.Called(ctx, _a1, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, string) error); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
