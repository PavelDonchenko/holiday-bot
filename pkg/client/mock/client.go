// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	client "git.foxminded.ua/foxstudent106361/holiday-bot/pkg/client"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// BuildURL provides a mock function with given fields: resource, filters
func (_m *Client) BuildURL(resource string, filters []client.FilterOptions) (string, error) {
	ret := _m.Called(resource, filters)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []client.FilterOptions) (string, error)); ok {
		return rf(resource, filters)
	}
	if rf, ok := ret.Get(0).(func(string, []client.FilterOptions) string); ok {
		r0 = rf(resource, filters)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []client.FilterOptions) error); ok {
		r1 = rf(resource, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRequest provides a mock function with given fields: req
func (_m *Client) SendRequest(req *http.Request) (*http.Response, error) {
	ret := _m.Called(req)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBaseURL provides a mock function with given fields: url
func (_m *Client) SetBaseURL(url string) {
	_m.Called(url)
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
